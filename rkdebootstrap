#!/bin/bash

SCRIPT_ROOT=$(dirname $(readlink -f "$0"))
ROOTFS_DIR=rootfs
source $SCRIPT_ROOT/../device/rockchip/.BoardConfig.mk
mirror="http://ftp.cn.debian.org/debian"

. "$SCRIPT_ROOT/shflags/shflags" || die "Couldn't find shflags"

DEFINE_string suite "buster" "debian version"
DEFINE_boolean base $FLAGS_FALSE "download base package"
DEFINE_boolean wifi $FLAGS_FALSE "download wifi package"
DEFINE_boolean audio $FLAGS_FALSE "download audio package"
DEFINE_boolean shrink $FLAGS_FALSE "reduce debian rootfs size"
DEFINE_boolean package $FLAGS_FALSE "package debian rootfs image"
DEFINE_boolean apt_update $FLAGS_FALSE "run apt-get update"

echo "====Runing command rkdebootstrap $@===="

# Parse command line.
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

set -e

log() {
    local format="$1"
    shift
    printf -- "$format\n" "$@" >&2
}

warn() {
    local format="$1"
    shift
    log "W: $format" "$@"
}

die() {
    local format="$1"
    shift
    log "E: $format" "$@"
    exit 1
}

run() {
    log "I: Running command: %s" "$*"
    "$@"
}

escape() {
    echo "$*" | sed "s/'/'\"'\"'/g; s/.*/'&'/"
}

unescape () {
    eval "echo" "$*"
}

apt_update_cmd()
{
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get update
}

install_wifi_package()
{
    #install wifi relate package
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y wpasupplicant
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y net-tools
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y isc-dhcp-client
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y iw

    #get wifi firmware, ko file and create rk_wifi_init.service file
    source $SCRIPT_ROOT/rkwifibt.sh
    sudo cp -rf $SCRIPT_ROOT/overlay-wifi/* $SCRIPT_ROOT/$ROOTFS_DIR

    #auto run rk_wifi_init when system start
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR systemctl enable rk_wifi_init.service

    sudo rm -rf $SCRIPT_ROOT/overlay-wifi/
}

install_audio_package()
{
    #audio package
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y alsa-utils

    #copy also config
    sudo cp -rf $SCRIPT_ROOT/../external/alsa-config/cards/* $SCRIPT_ROOT/$ROOTFS_DIR/usr/share/alsa/cards/
}

shrink_rootfs()
{
    #reduce rootfs size, after run this function, if you want to use apt-get function,
    #you need to run "apt-get update“ first
    sudo chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get clean
    sudo rm -rf $SCRIPT_ROOT/$ROOTFS_DIR/usr/share/locale/*
    sudo rm -rf $SCRIPT_ROOT/$ROOTFS_DIR/usr/share/man/*
    sudo rm -rf $SCRIPT_ROOT/$ROOTFS_DIR/usr/share/doc/*
    sudo rm -rf $SCRIPT_ROOT/$ROOTFS_DIR/var/log/*
    sudo rm -rf $SCRIPT_ROOT/$ROOTFS_DIR/var/lib/apt/lists/*
    sudo rm -rf $SCRIPT_ROOT/$ROOTFS_DIR/var/cache/*
}

finish() {
    sudo umount ${MOUNTPOINT} || true
    echo -e "\e[31m MAKE ROOTFS FAILED.\e[0m"
    exit -1
}

package_rootfs_image()
{
    MOUNTPOINT=$SCRIPT_ROOT/image
    ROOTFSIMAGE=$SCRIPT_ROOT/rootfs.img

    echo Making rootfs image!

    if [ -e ${ROOTFSIMAGE} ]; then
	rm ${ROOTFSIMAGE}
    fi

    # Create directories
    mkdir ${MOUNTPOINT}
    dd if=/dev/zero of=${ROOTFSIMAGE} bs=1K count=0 seek=512000

    echo Format rootfs to RK_ROOTFS_TYPE
    mkfs.${RK_ROOTFS_TYPE} ${ROOTFSIMAGE}

    echo Mount rootfs to ${MOUNTPOINT}
    sudo mount  ${ROOTFSIMAGE} ${MOUNTPOINT}
    trap finish ERR

    echo Copy rootfs to ${MOUNTPOINT}
    sudo cp -rfp $SCRIPT_ROOT/$ROOTFS_DIR/*  ${MOUNTPOINT}

    echo Umount rootfs
    sudo umount ${MOUNTPOINT}

    echo Rootfs Image: ${ROOTFSIMAGE}

    e2fsck -p -f ${ROOTFSIMAGE}
    resize2fs -M ${ROOTFSIMAGE}

    if [ -e ${MOUNTPOINT} ]; then
	rm -r ${MOUNTPOINT}
    fi

    echo "======generate rootfs.image in $SCRIPT_ROOT======"
}

install_usbmount()
{
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y lockfile-progs

    git clone https://github.com/rbrito/usbmount

    install -m 0755 -D $SCRIPT_ROOT/usbmount/usbmount $SCRIPT_ROOT/$ROOTFS_DIR/usr/share/usbmount/usbmount

    install -m 0755 -D $SCRIPT_ROOT/usbmount/00_create_model_symlink \
	   $SCRIPT_ROOT/$ROOTFS_DIR/etc/usbmount/mount.d/00_create_model_symlink
    install -m 0755 -D $SCRIPT_ROOT/usbmount/00_remove_model_symlink \
	   $SCRIPT_ROOT/$ROOTFS_DIR/etc/usbmount/umount.d/00_remove_model_symlink

    install -m 0644 -D $SCRIPT_ROOT/usbmount/90-usbmount.rules $SCRIPT_ROOT/$ROOTFS_DIR/lib/udev/rules.d/90-usbmount.rules
    install -m 0644 -D $SCRIPT_ROOT/usbmount/usbmount.conf $SCRIPT_ROOT/$ROOTFS_DIR/etc/usbmount/usbmount.conf

    install -m 644 -D  $SCRIPT_ROOT/usbmount/usbmount@.service $SCRIPT_ROOT/$ROOTFS_DIR/lib/systemd/system/usbmount@.service

    for i in 0 1 2 3 4 5 6 7; do
	mkdir $SCRIPT_ROOT/$ROOTFS_DIR/media/usb$i 2> /dev/null || :
    done

    rm -rf usbmount/
}

enable_adbd()
{
    sudo cp $SCRIPT_ROOT/overlay-usb/usr/local/sbin/adbd-"$RK_ARCH" $SCRIPT_ROOT/$ROOTFS_DIR/usr/local/sbin/adbd
    sudo cp $SCRIPT_ROOT/overlay-usb/usr/local/sbin/S60adbd $SCRIPT_ROOT/$ROOTFS_DIR/usr/local/sbin/
    sudo cp $SCRIPT_ROOT/overlay-usb/usr/lib/libcutils.so $SCRIPT_ROOT/$ROOTFS_DIR/usr/lib/.
}

#found the fastest mirror
get_fast_mirror()
{
    echo "to get fastest mirror"

    sudo netselect-apt -a arm64 2>&1 |grep -A 1 "fastest valid for HTTP" > $SCRIPT_ROOT/$ROOTFS_DIR/fastest_mirror
    mirror=$(tail -1 $SCRIPT_ROOT/$ROOTFS_DIR/fastest_mirror)
    sudo rm $SCRIPT_ROOT/$ROOTFS_DIR/fastest_mirror

    echo "the fastest mirror is "$mirror""
}

base_config()
{
    which debootstrap >/dev/null 2>/dev/null ||
      die "debootstrap isn't found in \$PATH, is debootstrap package installed?"

    if [ -e $SCRIPT_ROOT/$ROOTFS_DIR ]; then
	sudo rm -rf $SCRIPT_ROOT/$ROOTFS_DIR
    fi

    mkdir $SCRIPT_ROOT/$ROOTFS_DIR

    qemu_arch=""
    case "$RK_ARCH" in
      arm|armeb)
        qemu_arch="$RK_ARCH"
      ;;
      armel|armhf)
        qemu_arch="arm"
      ;;
      arm64)
        qemu_arch="aarch64"
      ;;
    *)
      die "Sorry, I don't know how to support arch %s" "$arch"
      ;;
    esac

    if ! which "qemu-$qemu_arch-static" >/dev/null 2>&1; then
      die "Sorry, couldn't find binary %s" "qemu-$qemu_arch-static"
    fi

    which netselect-apt >/dev/null 2>/dev/null && get_fast_mirror

    eval run debootstrap --variant minbase --arch "$RK_ARCH" --foreign $FLAGS_suite $SCRIPT_ROOT/$ROOTFS_DIR $mirror
    mkdir -p "$SCRIPT_ROOT/$ROOTFS_DIR/usr/bin"
    cp $(which "qemu-$qemu_arch-static") "$SCRIPT_ROOT/$ROOTFS_DIR/usr/bin"
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR /debootstrap/debootstrap --second-stage

    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y systemd
    run chroot $SCRIPT_ROOT/$ROOTFS_DIR apt-get install -y udev

    #enable root automatic login
    if test -f $SCRIPT_ROOT/$ROOTFS_DIR/lib/systemd/system/serial-getty@.service; then
	echo "enable auto login"
	sed -i '/ExecStart/c\\nExecStart=-/sbin/agetty --autologin root --keep-baud 115200,38400,9600 %I $TERM' $SCRIPT_ROOT/$ROOTFS_DIR/lib/systemd/system/serial-getty@.service
    fi

    install_usbmount || exit 1
    enable_adbd || exit 1
}

main() {
    if [ ${FLAGS_base} -eq ${FLAGS_TRUE} ]; then
       base_config || exit 1
    fi

    if [ ${FLAGS_apt_update} -eq ${FLAGS_TRUE} ]; then
       apt_update_cmd || exit 1
    fi

    if [ ${FLAGS_wifi} -eq ${FLAGS_TRUE} ]; then
       install_wifi_package || exit 1
    fi

    if [ ${FLAGS_audio} -eq ${FLAGS_TRUE} ]; then
	install_audio_package || exit 1
    fi

    if [ ${FLAGS_shrink} -eq ${FLAGS_TRUE} ]; then
	shrink_rootfs || exit 1
    fi

    if [ ${FLAGS_package} -eq ${FLAGS_TRUE} ]; then
	package_rootfs_image || exit 1
    fi

}

main "$@"
